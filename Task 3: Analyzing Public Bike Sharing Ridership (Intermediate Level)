{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9272111,"sourceType":"datasetVersion","datasetId":5611286}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/padminidevipulihora/codevo-bike-sharing-dataset?scriptVersionId=195320557\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# importing libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:33:36.391476Z","iopub.execute_input":"2024-09-04T15:33:36.391955Z","iopub.status.idle":"2024-09-04T15:33:36.398473Z","shell.execute_reply.started":"2024-09-04T15:33:36.391914Z","shell.execute_reply":"2024-09-04T15:33:36.396881Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":"# importing dataset","metadata":{}},{"cell_type":"markdown","source":"dataset 1st download in personal laptop and again upload in kaggle llike add as input","metadata":{}},{"cell_type":"markdown","source":"adding input as bike sharing dataset","metadata":{}},{"cell_type":"code","source":"hour = \"/kaggle/input/d/padminidevipulihora/bike-sharing-dataset/hour.csv\"\nday = \"/kaggle/input/d/padminidevipulihora/bike-sharing-dataset/day.csv\"\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:24:47.096837Z","iopub.execute_input":"2024-09-04T15:24:47.097259Z","iopub.status.idle":"2024-09-04T15:24:47.102743Z","shell.execute_reply.started":"2024-09-04T15:24:47.09722Z","shell.execute_reply":"2024-09-04T15:24:47.101511Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"# reading dataset","metadata":{}},{"cell_type":"code","source":"day_df = pd.read_csv(day)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:03.691235Z","iopub.execute_input":"2024-09-04T15:25:03.691653Z","iopub.status.idle":"2024-09-04T15:25:03.734789Z","shell.execute_reply.started":"2024-09-04T15:25:03.691611Z","shell.execute_reply":"2024-09-04T15:25:03.733808Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"day_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:07.360806Z","iopub.execute_input":"2024-09-04T15:25:07.361498Z","iopub.status.idle":"2024-09-04T15:25:07.403228Z","shell.execute_reply.started":"2024-09-04T15:25:07.361442Z","shell.execute_reply":"2024-09-04T15:25:07.401858Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   instant      dteday  season  yr  mnth  holiday  weekday  workingday  \\\n0        1  2011-01-01       1   0     1        0        6           0   \n1        2  2011-01-02       1   0     1        0        0           0   \n2        3  2011-01-03       1   0     1        0        1           1   \n3        4  2011-01-04       1   0     1        0        2           1   \n4        5  2011-01-05       1   0     1        0        3           1   \n\n   weathersit      temp     atemp       hum  windspeed  casual  registered  \\\n0           2  0.344167  0.363625  0.805833   0.160446     331         654   \n1           2  0.363478  0.353739  0.696087   0.248539     131         670   \n2           1  0.196364  0.189405  0.437273   0.248309     120        1229   \n3           1  0.200000  0.212122  0.590435   0.160296     108        1454   \n4           1  0.226957  0.229270  0.436957   0.186900      82        1518   \n\n    cnt  \n0   985  \n1   801  \n2  1349  \n3  1562  \n4  1600  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>instant</th>\n      <th>dteday</th>\n      <th>season</th>\n      <th>yr</th>\n      <th>mnth</th>\n      <th>holiday</th>\n      <th>weekday</th>\n      <th>workingday</th>\n      <th>weathersit</th>\n      <th>temp</th>\n      <th>atemp</th>\n      <th>hum</th>\n      <th>windspeed</th>\n      <th>casual</th>\n      <th>registered</th>\n      <th>cnt</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2011-01-01</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.344167</td>\n      <td>0.363625</td>\n      <td>0.805833</td>\n      <td>0.160446</td>\n      <td>331</td>\n      <td>654</td>\n      <td>985</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2011-01-02</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.363478</td>\n      <td>0.353739</td>\n      <td>0.696087</td>\n      <td>0.248539</td>\n      <td>131</td>\n      <td>670</td>\n      <td>801</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2011-01-03</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.196364</td>\n      <td>0.189405</td>\n      <td>0.437273</td>\n      <td>0.248309</td>\n      <td>120</td>\n      <td>1229</td>\n      <td>1349</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2011-01-04</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.200000</td>\n      <td>0.212122</td>\n      <td>0.590435</td>\n      <td>0.160296</td>\n      <td>108</td>\n      <td>1454</td>\n      <td>1562</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2011-01-05</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.226957</td>\n      <td>0.229270</td>\n      <td>0.436957</td>\n      <td>0.186900</td>\n      <td>82</td>\n      <td>1518</td>\n      <td>1600</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"hour_df= pd.read_csv(hour)\nhour_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:14.79537Z","iopub.execute_input":"2024-09-04T15:25:14.795825Z","iopub.status.idle":"2024-09-04T15:25:14.878165Z","shell.execute_reply.started":"2024-09-04T15:25:14.795761Z","shell.execute_reply":"2024-09-04T15:25:14.876939Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   instant      dteday  season  yr  mnth  hr  holiday  weekday  workingday  \\\n0        1  2011-01-01       1   0     1   0        0        6           0   \n1        2  2011-01-01       1   0     1   1        0        6           0   \n2        3  2011-01-01       1   0     1   2        0        6           0   \n3        4  2011-01-01       1   0     1   3        0        6           0   \n4        5  2011-01-01       1   0     1   4        0        6           0   \n\n   weathersit  temp   atemp   hum  windspeed  casual  registered  cnt  \n0           1  0.24  0.2879  0.81        0.0       3          13   16  \n1           1  0.22  0.2727  0.80        0.0       8          32   40  \n2           1  0.22  0.2727  0.80        0.0       5          27   32  \n3           1  0.24  0.2879  0.75        0.0       3          10   13  \n4           1  0.24  0.2879  0.75        0.0       0           1    1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>instant</th>\n      <th>dteday</th>\n      <th>season</th>\n      <th>yr</th>\n      <th>mnth</th>\n      <th>hr</th>\n      <th>holiday</th>\n      <th>weekday</th>\n      <th>workingday</th>\n      <th>weathersit</th>\n      <th>temp</th>\n      <th>atemp</th>\n      <th>hum</th>\n      <th>windspeed</th>\n      <th>casual</th>\n      <th>registered</th>\n      <th>cnt</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2011-01-01</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.24</td>\n      <td>0.2879</td>\n      <td>0.81</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>13</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2011-01-01</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.22</td>\n      <td>0.2727</td>\n      <td>0.80</td>\n      <td>0.0</td>\n      <td>8</td>\n      <td>32</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2011-01-01</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.22</td>\n      <td>0.2727</td>\n      <td>0.80</td>\n      <td>0.0</td>\n      <td>5</td>\n      <td>27</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2011-01-01</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.24</td>\n      <td>0.2879</td>\n      <td>0.75</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>10</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2011-01-01</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.24</td>\n      <td>0.2879</td>\n      <td>0.75</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"day_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:19.128518Z","iopub.execute_input":"2024-09-04T15:25:19.128982Z","iopub.status.idle":"2024-09-04T15:25:19.155317Z","shell.execute_reply.started":"2024-09-04T15:25:19.128937Z","shell.execute_reply":"2024-09-04T15:25:19.154113Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 731 entries, 0 to 730\nData columns (total 16 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   instant     731 non-null    int64  \n 1   dteday      731 non-null    object \n 2   season      731 non-null    int64  \n 3   yr          731 non-null    int64  \n 4   mnth        731 non-null    int64  \n 5   holiday     731 non-null    int64  \n 6   weekday     731 non-null    int64  \n 7   workingday  731 non-null    int64  \n 8   weathersit  731 non-null    int64  \n 9   temp        731 non-null    float64\n 10  atemp       731 non-null    float64\n 11  hum         731 non-null    float64\n 12  windspeed   731 non-null    float64\n 13  casual      731 non-null    int64  \n 14  registered  731 non-null    int64  \n 15  cnt         731 non-null    int64  \ndtypes: float64(4), int64(11), object(1)\nmemory usage: 91.5+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"hour_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:25.077052Z","iopub.execute_input":"2024-09-04T15:25:25.078051Z","iopub.status.idle":"2024-09-04T15:25:25.09242Z","shell.execute_reply.started":"2024-09-04T15:25:25.078Z","shell.execute_reply":"2024-09-04T15:25:25.091039Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 17379 entries, 0 to 17378\nData columns (total 17 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   instant     17379 non-null  int64  \n 1   dteday      17379 non-null  object \n 2   season      17379 non-null  int64  \n 3   yr          17379 non-null  int64  \n 4   mnth        17379 non-null  int64  \n 5   hr          17379 non-null  int64  \n 6   holiday     17379 non-null  int64  \n 7   weekday     17379 non-null  int64  \n 8   workingday  17379 non-null  int64  \n 9   weathersit  17379 non-null  int64  \n 10  temp        17379 non-null  float64\n 11  atemp       17379 non-null  float64\n 12  hum         17379 non-null  float64\n 13  windspeed   17379 non-null  float64\n 14  casual      17379 non-null  int64  \n 15  registered  17379 non-null  int64  \n 16  cnt         17379 non-null  int64  \ndtypes: float64(4), int64(12), object(1)\nmemory usage: 2.3+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"day_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:32.999765Z","iopub.execute_input":"2024-09-04T15:25:33.000225Z","iopub.status.idle":"2024-09-04T15:25:33.010052Z","shell.execute_reply.started":"2024-09-04T15:25:33.000183Z","shell.execute_reply":"2024-09-04T15:25:33.008953Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"instant       0\ndteday        0\nseason        0\nyr            0\nmnth          0\nholiday       0\nweekday       0\nworkingday    0\nweathersit    0\ntemp          0\natemp         0\nhum           0\nwindspeed     0\ncasual        0\nregistered    0\ncnt           0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"hour_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:37.193508Z","iopub.execute_input":"2024-09-04T15:25:37.19396Z","iopub.status.idle":"2024-09-04T15:25:37.207729Z","shell.execute_reply.started":"2024-09-04T15:25:37.193915Z","shell.execute_reply":"2024-09-04T15:25:37.206605Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"instant       0\ndteday        0\nseason        0\nyr            0\nmnth          0\nhr            0\nholiday       0\nweekday       0\nworkingday    0\nweathersit    0\ntemp          0\natemp         0\nhum           0\nwindspeed     0\ncasual        0\nregistered    0\ncnt           0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"day_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:41.312089Z","iopub.execute_input":"2024-09-04T15:25:41.312547Z","iopub.status.idle":"2024-09-04T15:25:41.370748Z","shell.execute_reply.started":"2024-09-04T15:25:41.312503Z","shell.execute_reply":"2024-09-04T15:25:41.369672Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"          instant      season          yr        mnth     holiday     weekday  \\\ncount  731.000000  731.000000  731.000000  731.000000  731.000000  731.000000   \nmean   366.000000    2.496580    0.500684    6.519836    0.028728    2.997264   \nstd    211.165812    1.110807    0.500342    3.451913    0.167155    2.004787   \nmin      1.000000    1.000000    0.000000    1.000000    0.000000    0.000000   \n25%    183.500000    2.000000    0.000000    4.000000    0.000000    1.000000   \n50%    366.000000    3.000000    1.000000    7.000000    0.000000    3.000000   \n75%    548.500000    3.000000    1.000000   10.000000    0.000000    5.000000   \nmax    731.000000    4.000000    1.000000   12.000000    1.000000    6.000000   \n\n       workingday  weathersit        temp       atemp         hum   windspeed  \\\ncount  731.000000  731.000000  731.000000  731.000000  731.000000  731.000000   \nmean     0.683995    1.395349    0.495385    0.474354    0.627894    0.190486   \nstd      0.465233    0.544894    0.183051    0.162961    0.142429    0.077498   \nmin      0.000000    1.000000    0.059130    0.079070    0.000000    0.022392   \n25%      0.000000    1.000000    0.337083    0.337842    0.520000    0.134950   \n50%      1.000000    1.000000    0.498333    0.486733    0.626667    0.180975   \n75%      1.000000    2.000000    0.655417    0.608602    0.730209    0.233214   \nmax      1.000000    3.000000    0.861667    0.840896    0.972500    0.507463   \n\n            casual   registered          cnt  \ncount   731.000000   731.000000   731.000000  \nmean    848.176471  3656.172367  4504.348837  \nstd     686.622488  1560.256377  1937.211452  \nmin       2.000000    20.000000    22.000000  \n25%     315.500000  2497.000000  3152.000000  \n50%     713.000000  3662.000000  4548.000000  \n75%    1096.000000  4776.500000  5956.000000  \nmax    3410.000000  6946.000000  8714.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>instant</th>\n      <th>season</th>\n      <th>yr</th>\n      <th>mnth</th>\n      <th>holiday</th>\n      <th>weekday</th>\n      <th>workingday</th>\n      <th>weathersit</th>\n      <th>temp</th>\n      <th>atemp</th>\n      <th>hum</th>\n      <th>windspeed</th>\n      <th>casual</th>\n      <th>registered</th>\n      <th>cnt</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n      <td>731.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>366.000000</td>\n      <td>2.496580</td>\n      <td>0.500684</td>\n      <td>6.519836</td>\n      <td>0.028728</td>\n      <td>2.997264</td>\n      <td>0.683995</td>\n      <td>1.395349</td>\n      <td>0.495385</td>\n      <td>0.474354</td>\n      <td>0.627894</td>\n      <td>0.190486</td>\n      <td>848.176471</td>\n      <td>3656.172367</td>\n      <td>4504.348837</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>211.165812</td>\n      <td>1.110807</td>\n      <td>0.500342</td>\n      <td>3.451913</td>\n      <td>0.167155</td>\n      <td>2.004787</td>\n      <td>0.465233</td>\n      <td>0.544894</td>\n      <td>0.183051</td>\n      <td>0.162961</td>\n      <td>0.142429</td>\n      <td>0.077498</td>\n      <td>686.622488</td>\n      <td>1560.256377</td>\n      <td>1937.211452</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.059130</td>\n      <td>0.079070</td>\n      <td>0.000000</td>\n      <td>0.022392</td>\n      <td>2.000000</td>\n      <td>20.000000</td>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>183.500000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.337083</td>\n      <td>0.337842</td>\n      <td>0.520000</td>\n      <td>0.134950</td>\n      <td>315.500000</td>\n      <td>2497.000000</td>\n      <td>3152.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>366.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.498333</td>\n      <td>0.486733</td>\n      <td>0.626667</td>\n      <td>0.180975</td>\n      <td>713.000000</td>\n      <td>3662.000000</td>\n      <td>4548.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>548.500000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>10.000000</td>\n      <td>0.000000</td>\n      <td>5.000000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>0.655417</td>\n      <td>0.608602</td>\n      <td>0.730209</td>\n      <td>0.233214</td>\n      <td>1096.000000</td>\n      <td>4776.500000</td>\n      <td>5956.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>731.000000</td>\n      <td>4.000000</td>\n      <td>1.000000</td>\n      <td>12.000000</td>\n      <td>1.000000</td>\n      <td>6.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>0.861667</td>\n      <td>0.840896</td>\n      <td>0.972500</td>\n      <td>0.507463</td>\n      <td>3410.000000</td>\n      <td>6946.000000</td>\n      <td>8714.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"hour_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:45.350344Z","iopub.execute_input":"2024-09-04T15:25:45.350808Z","iopub.status.idle":"2024-09-04T15:25:45.413391Z","shell.execute_reply.started":"2024-09-04T15:25:45.35075Z","shell.execute_reply":"2024-09-04T15:25:45.412281Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"          instant        season            yr          mnth            hr  \\\ncount  17379.0000  17379.000000  17379.000000  17379.000000  17379.000000   \nmean    8690.0000      2.501640      0.502561      6.537775     11.546752   \nstd     5017.0295      1.106918      0.500008      3.438776      6.914405   \nmin        1.0000      1.000000      0.000000      1.000000      0.000000   \n25%     4345.5000      2.000000      0.000000      4.000000      6.000000   \n50%     8690.0000      3.000000      1.000000      7.000000     12.000000   \n75%    13034.5000      3.000000      1.000000     10.000000     18.000000   \nmax    17379.0000      4.000000      1.000000     12.000000     23.000000   \n\n            holiday       weekday    workingday    weathersit          temp  \\\ncount  17379.000000  17379.000000  17379.000000  17379.000000  17379.000000   \nmean       0.028770      3.003683      0.682721      1.425283      0.496987   \nstd        0.167165      2.005771      0.465431      0.639357      0.192556   \nmin        0.000000      0.000000      0.000000      1.000000      0.020000   \n25%        0.000000      1.000000      0.000000      1.000000      0.340000   \n50%        0.000000      3.000000      1.000000      1.000000      0.500000   \n75%        0.000000      5.000000      1.000000      2.000000      0.660000   \nmax        1.000000      6.000000      1.000000      4.000000      1.000000   \n\n              atemp           hum     windspeed        casual    registered  \\\ncount  17379.000000  17379.000000  17379.000000  17379.000000  17379.000000   \nmean       0.475775      0.627229      0.190098     35.676218    153.786869   \nstd        0.171850      0.192930      0.122340     49.305030    151.357286   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.333300      0.480000      0.104500      4.000000     34.000000   \n50%        0.484800      0.630000      0.194000     17.000000    115.000000   \n75%        0.621200      0.780000      0.253700     48.000000    220.000000   \nmax        1.000000      1.000000      0.850700    367.000000    886.000000   \n\n                cnt  \ncount  17379.000000  \nmean     189.463088  \nstd      181.387599  \nmin        1.000000  \n25%       40.000000  \n50%      142.000000  \n75%      281.000000  \nmax      977.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>instant</th>\n      <th>season</th>\n      <th>yr</th>\n      <th>mnth</th>\n      <th>hr</th>\n      <th>holiday</th>\n      <th>weekday</th>\n      <th>workingday</th>\n      <th>weathersit</th>\n      <th>temp</th>\n      <th>atemp</th>\n      <th>hum</th>\n      <th>windspeed</th>\n      <th>casual</th>\n      <th>registered</th>\n      <th>cnt</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>17379.0000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n      <td>17379.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>8690.0000</td>\n      <td>2.501640</td>\n      <td>0.502561</td>\n      <td>6.537775</td>\n      <td>11.546752</td>\n      <td>0.028770</td>\n      <td>3.003683</td>\n      <td>0.682721</td>\n      <td>1.425283</td>\n      <td>0.496987</td>\n      <td>0.475775</td>\n      <td>0.627229</td>\n      <td>0.190098</td>\n      <td>35.676218</td>\n      <td>153.786869</td>\n      <td>189.463088</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>5017.0295</td>\n      <td>1.106918</td>\n      <td>0.500008</td>\n      <td>3.438776</td>\n      <td>6.914405</td>\n      <td>0.167165</td>\n      <td>2.005771</td>\n      <td>0.465431</td>\n      <td>0.639357</td>\n      <td>0.192556</td>\n      <td>0.171850</td>\n      <td>0.192930</td>\n      <td>0.122340</td>\n      <td>49.305030</td>\n      <td>151.357286</td>\n      <td>181.387599</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.0000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.020000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>4345.5000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>6.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.340000</td>\n      <td>0.333300</td>\n      <td>0.480000</td>\n      <td>0.104500</td>\n      <td>4.000000</td>\n      <td>34.000000</td>\n      <td>40.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>8690.0000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>12.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>0.484800</td>\n      <td>0.630000</td>\n      <td>0.194000</td>\n      <td>17.000000</td>\n      <td>115.000000</td>\n      <td>142.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>13034.5000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>10.000000</td>\n      <td>18.000000</td>\n      <td>0.000000</td>\n      <td>5.000000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>0.660000</td>\n      <td>0.621200</td>\n      <td>0.780000</td>\n      <td>0.253700</td>\n      <td>48.000000</td>\n      <td>220.000000</td>\n      <td>281.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>17379.0000</td>\n      <td>4.000000</td>\n      <td>1.000000</td>\n      <td>12.000000</td>\n      <td>23.000000</td>\n      <td>1.000000</td>\n      <td>6.000000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.850700</td>\n      <td>367.000000</td>\n      <td>886.000000</td>\n      <td>977.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# clean data \nincludes numerical data were given variable names as specified in dataset by using map function","metadata":{}},{"cell_type":"code","source":"day_df['mnth']= day_df['mnth'].map({1:'Jan',2:'Feb',3:'Mar',4:'Apr',\n                                    5:'May',6:'Jun', 7:'Jul', 8:'Aug', 9:'Sep', 10:'Oct',11:'Nov', 12:'Dec'})\nday_df['season'] = day_df['season'].map({\n    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'\n})\nday_df['weekday'] = day_df['weekday'].map({\n    0: 'Sun', 1: 'Mon', 2: 'Tue', 3: 'Wed', 4: 'Thu', 5: 'Fri', 6: 'Sat'\n})\nday_df['weathersit'] = day_df['weathersit'].map({\n    1: 'Clear/Partly Cloudy',\n    2: 'Misty/Cloudy',\n    3: 'Light Snow/Rain',\n    4: 'Severe Weather'\n})\n\nday_df['yr'] = day_df['yr'].map({\n    0: '2011', 1: '2012'\n})\n\nday_df['workingday'] = day_df['workingday'].map({\n    0: 'Holiday', 1: 'Workingday'\n})","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:25:53.06327Z","iopub.execute_input":"2024-09-04T15:25:53.063697Z","iopub.status.idle":"2024-09-04T15:25:53.081197Z","shell.execute_reply.started":"2024-09-04T15:25:53.063659Z","shell.execute_reply":"2024-09-04T15:25:53.079827Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":"making repeated data as categorical variables for easy accses","metadata":{}},{"cell_type":"code","source":"day_df['season'] = day_df.season.astype('category')\nday_df['yr'] = day_df.yr.astype('category')\nday_df['mnth'] = day_df.mnth.astype('category')\nday_df['holiday'] = day_df.holiday.astype('category')\nday_df['weekday'] = day_df.weekday.astype('category')\nday_df['workingday'] = day_df.workingday.astype('category')\nday_df['weathersit'] = day_df.weathersit.astype('category')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:26:09.480392Z","iopub.execute_input":"2024-09-04T15:26:09.480946Z","iopub.status.idle":"2024-09-04T15:26:09.495991Z","shell.execute_reply.started":"2024-09-04T15:26:09.480902Z","shell.execute_reply":"2024-09-04T15:26:09.494697Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"seeing how data changes in columns after cleaning","metadata":{}},{"cell_type":"code","source":"day_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:26:17.456376Z","iopub.execute_input":"2024-09-04T15:26:17.456823Z","iopub.status.idle":"2024-09-04T15:26:17.479978Z","shell.execute_reply.started":"2024-09-04T15:26:17.456766Z","shell.execute_reply":"2024-09-04T15:26:17.478831Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"   instant      dteday  season    yr mnth holiday weekday  workingday  \\\n0        1  2011-01-01  Spring  2011  Jan       0     Sat     Holiday   \n1        2  2011-01-02  Spring  2011  Jan       0     Sun     Holiday   \n2        3  2011-01-03  Spring  2011  Jan       0     Mon  Workingday   \n3        4  2011-01-04  Spring  2011  Jan       0     Tue  Workingday   \n4        5  2011-01-05  Spring  2011  Jan       0     Wed  Workingday   \n\n            weathersit      temp     atemp       hum  windspeed  casual  \\\n0         Misty/Cloudy  0.344167  0.363625  0.805833   0.160446     331   \n1         Misty/Cloudy  0.363478  0.353739  0.696087   0.248539     131   \n2  Clear/Partly Cloudy  0.196364  0.189405  0.437273   0.248309     120   \n3  Clear/Partly Cloudy  0.200000  0.212122  0.590435   0.160296     108   \n4  Clear/Partly Cloudy  0.226957  0.229270  0.436957   0.186900      82   \n\n   registered   cnt  \n0         654   985  \n1         670   801  \n2        1229  1349  \n3        1454  1562  \n4        1518  1600  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>instant</th>\n      <th>dteday</th>\n      <th>season</th>\n      <th>yr</th>\n      <th>mnth</th>\n      <th>holiday</th>\n      <th>weekday</th>\n      <th>workingday</th>\n      <th>weathersit</th>\n      <th>temp</th>\n      <th>atemp</th>\n      <th>hum</th>\n      <th>windspeed</th>\n      <th>casual</th>\n      <th>registered</th>\n      <th>cnt</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2011-01-01</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>0</td>\n      <td>Sat</td>\n      <td>Holiday</td>\n      <td>Misty/Cloudy</td>\n      <td>0.344167</td>\n      <td>0.363625</td>\n      <td>0.805833</td>\n      <td>0.160446</td>\n      <td>331</td>\n      <td>654</td>\n      <td>985</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2011-01-02</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>0</td>\n      <td>Sun</td>\n      <td>Holiday</td>\n      <td>Misty/Cloudy</td>\n      <td>0.363478</td>\n      <td>0.353739</td>\n      <td>0.696087</td>\n      <td>0.248539</td>\n      <td>131</td>\n      <td>670</td>\n      <td>801</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2011-01-03</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>0</td>\n      <td>Mon</td>\n      <td>Workingday</td>\n      <td>Clear/Partly Cloudy</td>\n      <td>0.196364</td>\n      <td>0.189405</td>\n      <td>0.437273</td>\n      <td>0.248309</td>\n      <td>120</td>\n      <td>1229</td>\n      <td>1349</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2011-01-04</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>0</td>\n      <td>Tue</td>\n      <td>Workingday</td>\n      <td>Clear/Partly Cloudy</td>\n      <td>0.200000</td>\n      <td>0.212122</td>\n      <td>0.590435</td>\n      <td>0.160296</td>\n      <td>108</td>\n      <td>1454</td>\n      <td>1562</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2011-01-05</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>0</td>\n      <td>Wed</td>\n      <td>Workingday</td>\n      <td>Clear/Partly Cloudy</td>\n      <td>0.226957</td>\n      <td>0.229270</td>\n      <td>0.436957</td>\n      <td>0.186900</td>\n      <td>82</td>\n      <td>1518</td>\n      <td>1600</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"seeing data type of columns changes from integer to category type","metadata":{}},{"cell_type":"code","source":"day_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:26:27.978067Z","iopub.execute_input":"2024-09-04T15:26:27.978921Z","iopub.status.idle":"2024-09-04T15:26:27.996482Z","shell.execute_reply.started":"2024-09-04T15:26:27.978875Z","shell.execute_reply":"2024-09-04T15:26:27.995332Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 731 entries, 0 to 730\nData columns (total 16 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   instant     731 non-null    int64   \n 1   dteday      731 non-null    object  \n 2   season      731 non-null    category\n 3   yr          731 non-null    category\n 4   mnth        731 non-null    category\n 5   holiday     731 non-null    category\n 6   weekday     731 non-null    category\n 7   workingday  731 non-null    category\n 8   weathersit  731 non-null    category\n 9   temp        731 non-null    float64 \n 10  atemp       731 non-null    float64 \n 11  hum         731 non-null    float64 \n 12  windspeed   731 non-null    float64 \n 13  casual      731 non-null    int64   \n 14  registered  731 non-null    int64   \n 15  cnt         731 non-null    int64   \ndtypes: category(7), float64(4), int64(4), object(1)\nmemory usage: 57.9+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"hour_df['mnth'] = hour_df['mnth'].map({\n    1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',\n    7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'\n})\nhour_df['season'] = hour_df['season'].map({\n    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'\n})\nhour_df['weekday'] = hour_df['weekday'].map({\n    0: 'Sun', 1: 'Mon', 2: 'Tue', 3: 'Wed', 4: 'Thu', 5: 'Fri', 6: 'Sat'\n})\nhour_df['weathersit'] = hour_df['weathersit'].map({\n    1: 'Clear/Partly Cloudy',\n    2: 'Misty/Cloudy',\n    3: 'Light Snow/Rain',\n    4: 'Severe Weather'\n})\n\nhour_df['yr'] = hour_df['yr'].map({\n    0: '2011', 1: '2012'\n})\n\nhour_df['workingday'] = hour_df['workingday'].map({\n    0: 'Holiday', 1: 'Workingday'\n})\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:28:31.713906Z","iopub.execute_input":"2024-09-04T15:28:31.71447Z","iopub.status.idle":"2024-09-04T15:28:31.733853Z","shell.execute_reply.started":"2024-09-04T15:28:31.71441Z","shell.execute_reply":"2024-09-04T15:28:31.732618Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"hour_df['season'] = hour_df.season.astype('category')\nhour_df['yr'] = hour_df.yr.astype('category')\nhour_df['mnth'] = hour_df.mnth.astype('category')\nhour_df['holiday'] = hour_df.holiday.astype('category')\nhour_df['weekday'] = hour_df.weekday.astype('category')\nhour_df['workingday'] = hour_df.workingday.astype('category')\nhour_df['weathersit'] = hour_df.weathersit.astype('category')","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:28:37.380713Z","iopub.execute_input":"2024-09-04T15:28:37.381483Z","iopub.status.idle":"2024-09-04T15:28:37.413145Z","shell.execute_reply.started":"2024-09-04T15:28:37.381438Z","shell.execute_reply":"2024-09-04T15:28:37.411908Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"hour_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:28:40.992799Z","iopub.execute_input":"2024-09-04T15:28:40.993694Z","iopub.status.idle":"2024-09-04T15:28:41.018567Z","shell.execute_reply.started":"2024-09-04T15:28:40.993648Z","shell.execute_reply":"2024-09-04T15:28:41.017148Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"   instant      dteday  season    yr mnth  hr holiday weekday workingday  \\\n0        1  2011-01-01  Spring  2011  Jan   0       0     Sat    Holiday   \n1        2  2011-01-01  Spring  2011  Jan   1       0     Sat    Holiday   \n2        3  2011-01-01  Spring  2011  Jan   2       0     Sat    Holiday   \n3        4  2011-01-01  Spring  2011  Jan   3       0     Sat    Holiday   \n4        5  2011-01-01  Spring  2011  Jan   4       0     Sat    Holiday   \n\n            weathersit  temp   atemp   hum  windspeed  casual  registered  cnt  \n0  Clear/Partly Cloudy  0.24  0.2879  0.81        0.0       3          13   16  \n1  Clear/Partly Cloudy  0.22  0.2727  0.80        0.0       8          32   40  \n2  Clear/Partly Cloudy  0.22  0.2727  0.80        0.0       5          27   32  \n3  Clear/Partly Cloudy  0.24  0.2879  0.75        0.0       3          10   13  \n4  Clear/Partly Cloudy  0.24  0.2879  0.75        0.0       0           1    1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>instant</th>\n      <th>dteday</th>\n      <th>season</th>\n      <th>yr</th>\n      <th>mnth</th>\n      <th>hr</th>\n      <th>holiday</th>\n      <th>weekday</th>\n      <th>workingday</th>\n      <th>weathersit</th>\n      <th>temp</th>\n      <th>atemp</th>\n      <th>hum</th>\n      <th>windspeed</th>\n      <th>casual</th>\n      <th>registered</th>\n      <th>cnt</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2011-01-01</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Sat</td>\n      <td>Holiday</td>\n      <td>Clear/Partly Cloudy</td>\n      <td>0.24</td>\n      <td>0.2879</td>\n      <td>0.81</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>13</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2011-01-01</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Sat</td>\n      <td>Holiday</td>\n      <td>Clear/Partly Cloudy</td>\n      <td>0.22</td>\n      <td>0.2727</td>\n      <td>0.80</td>\n      <td>0.0</td>\n      <td>8</td>\n      <td>32</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2011-01-01</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Sat</td>\n      <td>Holiday</td>\n      <td>Clear/Partly Cloudy</td>\n      <td>0.22</td>\n      <td>0.2727</td>\n      <td>0.80</td>\n      <td>0.0</td>\n      <td>5</td>\n      <td>27</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2011-01-01</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>3</td>\n      <td>0</td>\n      <td>Sat</td>\n      <td>Holiday</td>\n      <td>Clear/Partly Cloudy</td>\n      <td>0.24</td>\n      <td>0.2879</td>\n      <td>0.75</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>10</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2011-01-01</td>\n      <td>Spring</td>\n      <td>2011</td>\n      <td>Jan</td>\n      <td>4</td>\n      <td>0</td>\n      <td>Sat</td>\n      <td>Holiday</td>\n      <td>Clear/Partly Cloudy</td>\n      <td>0.24</td>\n      <td>0.2879</td>\n      <td>0.75</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"hour_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:28:45.666739Z","iopub.execute_input":"2024-09-04T15:28:45.667831Z","iopub.status.idle":"2024-09-04T15:28:45.691494Z","shell.execute_reply.started":"2024-09-04T15:28:45.667738Z","shell.execute_reply":"2024-09-04T15:28:45.690203Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 17379 entries, 0 to 17378\nData columns (total 17 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   instant     17379 non-null  int64   \n 1   dteday      17379 non-null  object  \n 2   season      17379 non-null  category\n 3   yr          17379 non-null  category\n 4   mnth        17379 non-null  category\n 5   hr          17379 non-null  int64   \n 6   holiday     17379 non-null  category\n 7   weekday     17379 non-null  category\n 8   workingday  17379 non-null  category\n 9   weathersit  17379 non-null  category\n 10  temp        17379 non-null  float64 \n 11  atemp       17379 non-null  float64 \n 12  hum         17379 non-null  float64 \n 13  windspeed   17379 non-null  float64 \n 14  casual      17379 non-null  int64   \n 15  registered  17379 non-null  int64   \n 16  cnt         17379 non-null  int64   \ndtypes: category(7), float64(4), int64(5), object(1)\nmemory usage: 1.4+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# exploratory data analysis","metadata":{}},{"cell_type":"markdown","source":"# 1. Bicycle rental trend","metadata":{}},{"cell_type":"code","source":"trend_bike = day_df.groupby(by='yr').agg({\n    'cnt': 'mean'\n})\n\ntrend_bike.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:29:11.309498Z","iopub.execute_input":"2024-09-04T15:29:11.309933Z","iopub.status.idle":"2024-09-04T15:29:11.327988Z","shell.execute_reply.started":"2024-09-04T15:29:11.309891Z","shell.execute_reply":"2024-09-04T15:29:11.326644Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/1818825500.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  trend_bike = day_df.groupby(by='yr').agg({\n","output_type":"stream"},{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"              cnt\nyr               \n2011  3405.761644\n2012  5599.934426","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cnt</th>\n    </tr>\n    <tr>\n      <th>yr</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2011</th>\n      <td>3405.761644</td>\n    </tr>\n    <tr>\n      <th>2012</th>\n      <td>5599.934426</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# 2.Grouping of bike renters (both casual and registered) by season","metadata":{}},{"cell_type":"code","source":"day_df.groupby('season').agg({\n    'casual': 'mean',\n    'registered': 'mean',\n    'cnt': ['max', 'min', 'mean']\n}).reindex (['Spring', 'Summer', 'Fall', 'Winter',])","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:30:18.409621Z","iopub.execute_input":"2024-09-04T15:30:18.410298Z","iopub.status.idle":"2024-09-04T15:30:18.439135Z","shell.execute_reply.started":"2024-09-04T15:30:18.410224Z","shell.execute_reply":"2024-09-04T15:30:18.437671Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/2398777389.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  day_df.groupby('season').agg({\n","output_type":"stream"},{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"             casual   registered   cnt                   \n               mean         mean   max   min         mean\nseason                                                   \nSpring   334.928177  2269.204420  7836   431  2604.132597\nSummer  1106.097826  3886.233696  8362   795  4992.331522\nFall    1202.611702  4441.691489  8714  1115  5644.303191\nWinter   729.112360  3999.050562  8555    22  4728.162921","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>casual</th>\n      <th>registered</th>\n      <th colspan=\"3\" halign=\"left\">cnt</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>max</th>\n      <th>min</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>season</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Spring</th>\n      <td>334.928177</td>\n      <td>2269.204420</td>\n      <td>7836</td>\n      <td>431</td>\n      <td>2604.132597</td>\n    </tr>\n    <tr>\n      <th>Summer</th>\n      <td>1106.097826</td>\n      <td>3886.233696</td>\n      <td>8362</td>\n      <td>795</td>\n      <td>4992.331522</td>\n    </tr>\n    <tr>\n      <th>Fall</th>\n      <td>1202.611702</td>\n      <td>4441.691489</td>\n      <td>8714</td>\n      <td>1115</td>\n      <td>5644.303191</td>\n    </tr>\n    <tr>\n      <th>Winter</th>\n      <td>729.112360</td>\n      <td>3999.050562</td>\n      <td>8555</td>\n      <td>22</td>\n      <td>4728.162921</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# 3. Grouping of bicycle renters (both casual and registered) based on weather conditions","metadata":{}},{"cell_type":"code","source":"\nday_df.groupby(by='weathersit').agg({\n    'cnt': ['max', 'min', 'mean', 'sum']\n})\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:30:25.756977Z","iopub.execute_input":"2024-09-04T15:30:25.757518Z","iopub.status.idle":"2024-09-04T15:30:25.78122Z","shell.execute_reply.started":"2024-09-04T15:30:25.757461Z","shell.execute_reply":"2024-09-04T15:30:25.779804Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/1245592045.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  day_df.groupby(by='weathersit').agg({\n","output_type":"stream"},{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"                      cnt                           \n                      max  min         mean      sum\nweathersit                                          \nClear/Partly Cloudy  8714  431  4876.786177  2257952\nLight Snow/Rain      4639   22  1803.285714    37869\nMisty/Cloudy         8362  605  4035.862348   996858","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"4\" halign=\"left\">cnt</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>max</th>\n      <th>min</th>\n      <th>mean</th>\n      <th>sum</th>\n    </tr>\n    <tr>\n      <th>weathersit</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Clear/Partly Cloudy</th>\n      <td>8714</td>\n      <td>431</td>\n      <td>4876.786177</td>\n      <td>2257952</td>\n    </tr>\n    <tr>\n      <th>Light Snow/Rain</th>\n      <td>4639</td>\n      <td>22</td>\n      <td>1803.285714</td>\n      <td>37869</td>\n    </tr>\n    <tr>\n      <th>Misty/Cloudy</th>\n      <td>8362</td>\n      <td>605</td>\n      <td>4035.862348</td>\n      <td>996858</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# 4. Daily bike renter comparison","metadata":{}},{"cell_type":"code","source":"day_df.groupby(by='weekday').agg({\n    'cnt':['max','min','mean']\n})","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:30:37.763588Z","iopub.execute_input":"2024-09-04T15:30:37.764847Z","iopub.status.idle":"2024-09-04T15:30:37.787226Z","shell.execute_reply.started":"2024-09-04T15:30:37.764766Z","shell.execute_reply":"2024-09-04T15:30:37.785821Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3626758315.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  day_df.groupby(by='weekday').agg({\n","output_type":"stream"},{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"          cnt                   \n          max   min         mean\nweekday                         \nFri      8362  1167  4690.288462\nMon      7525    22  4338.123810\nSat      8714   627  4550.542857\nSun      8227   605  4228.828571\nThu      7804   431  4667.259615\nTue      7767   683  4510.663462\nWed      8173   441  4548.538462","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">cnt</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>max</th>\n      <th>min</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>weekday</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Fri</th>\n      <td>8362</td>\n      <td>1167</td>\n      <td>4690.288462</td>\n    </tr>\n    <tr>\n      <th>Mon</th>\n      <td>7525</td>\n      <td>22</td>\n      <td>4338.123810</td>\n    </tr>\n    <tr>\n      <th>Sat</th>\n      <td>8714</td>\n      <td>627</td>\n      <td>4550.542857</td>\n    </tr>\n    <tr>\n      <th>Sun</th>\n      <td>8227</td>\n      <td>605</td>\n      <td>4228.828571</td>\n    </tr>\n    <tr>\n      <th>Thu</th>\n      <td>7804</td>\n      <td>431</td>\n      <td>4667.259615</td>\n    </tr>\n    <tr>\n      <th>Tue</th>\n      <td>7767</td>\n      <td>683</td>\n      <td>4510.663462</td>\n    </tr>\n    <tr>\n      <th>Wed</th>\n      <td>8173</td>\n      <td>441</td>\n      <td>4548.538462</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# differnce between reindex and normal index","metadata":{}},{"cell_type":"code","source":"#reindex arranges data in specified order. if not mentioned it arranges in ascending\nday_df.groupby(by='weekday').agg({\n    'cnt':['max','min','mean']\n})","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:32:36.245057Z","iopub.execute_input":"2024-09-04T15:32:36.245589Z","iopub.status.idle":"2024-09-04T15:32:36.268724Z","shell.execute_reply.started":"2024-09-04T15:32:36.245542Z","shell.execute_reply":"2024-09-04T15:32:36.267357Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3185235773.py:2: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  day_df.groupby(by='weekday').agg({\n","output_type":"stream"},{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"          cnt                   \n          max   min         mean\nweekday                         \nFri      8362  1167  4690.288462\nMon      7525    22  4338.123810\nSat      8714   627  4550.542857\nSun      8227   605  4228.828571\nThu      7804   431  4667.259615\nTue      7767   683  4510.663462\nWed      8173   441  4548.538462","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">cnt</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>max</th>\n      <th>min</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>weekday</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Fri</th>\n      <td>8362</td>\n      <td>1167</td>\n      <td>4690.288462</td>\n    </tr>\n    <tr>\n      <th>Mon</th>\n      <td>7525</td>\n      <td>22</td>\n      <td>4338.123810</td>\n    </tr>\n    <tr>\n      <th>Sat</th>\n      <td>8714</td>\n      <td>627</td>\n      <td>4550.542857</td>\n    </tr>\n    <tr>\n      <th>Sun</th>\n      <td>8227</td>\n      <td>605</td>\n      <td>4228.828571</td>\n    </tr>\n    <tr>\n      <th>Thu</th>\n      <td>7804</td>\n      <td>431</td>\n      <td>4667.259615</td>\n    </tr>\n    <tr>\n      <th>Tue</th>\n      <td>7767</td>\n      <td>683</td>\n      <td>4510.663462</td>\n    </tr>\n    <tr>\n      <th>Wed</th>\n      <td>8173</td>\n      <td>441</td>\n      <td>4548.538462</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# 5. Comparison of bicycle renters on holidays and weekdays","metadata":{}},{"cell_type":"code","source":"day_df.groupby(by='workingday').agg({\n    'cnt': ['max', 'min', 'mean']\n})\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:32:47.586323Z","iopub.execute_input":"2024-09-04T15:32:47.58699Z","iopub.status.idle":"2024-09-04T15:32:47.610399Z","shell.execute_reply.started":"2024-09-04T15:32:47.586927Z","shell.execute_reply":"2024-09-04T15:32:47.608866Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3317688708.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  day_df.groupby(by='workingday').agg({\n","output_type":"stream"},{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"             cnt                  \n             max  min         mean\nworkingday                        \nHoliday     8714  605  4330.168831\nWorkingday  8362   22  4584.820000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">cnt</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>max</th>\n      <th>min</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>workingday</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Holiday</th>\n      <td>8714</td>\n      <td>605</td>\n      <td>4330.168831</td>\n    </tr>\n    <tr>\n      <th>Workingday</th>\n      <td>8362</td>\n      <td>22</td>\n      <td>4584.820000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Visualization & Explanatory Analysis","metadata":{}},{"cell_type":"markdown","source":"# Visualization 1: What is the trend in the number of bicycle users in recent years?","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:40:56.990631Z","iopub.execute_input":"2024-09-04T15:40:56.991085Z","iopub.status.idle":"2024-09-04T15:40:56.997561Z","shell.execute_reply.started":"2024-09-04T15:40:56.991044Z","shell.execute_reply":"2024-09-04T15:40:56.996046Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"\n day_df.groupby(by=[\"mnth\",\"yr\"]).agg({\n    \"cnt\": \"sum\"\n}).reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:46:05.163265Z","iopub.execute_input":"2024-09-04T15:46:05.164223Z","iopub.status.idle":"2024-09-04T15:46:05.190223Z","shell.execute_reply.started":"2024-09-04T15:46:05.164168Z","shell.execute_reply":"2024-09-04T15:46:05.18899Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/4096843752.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  day_df.groupby(by=[\"mnth\",\"yr\"]).agg({\n","output_type":"stream"},{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"   mnth    yr     cnt\n0   Jan  2011   38189\n1   Jan  2012   96744\n2   Feb  2011   48215\n3   Feb  2012  103137\n4   Mar  2011   64045\n5   Mar  2012  164875\n6   Apr  2011   94870\n7   Apr  2012  174224\n8   May  2011  135821\n9   May  2012  195865\n10  Jun  2011  143512\n11  Jun  2012  202830\n12  Jul  2011  141341\n13  Jul  2012  203607\n14  Aug  2011  136691\n15  Aug  2012  214503\n16  Sep  2011  127418\n17  Sep  2012  218573\n18  Oct  2011  123511\n19  Oct  2012  198841\n20  Nov  2011  102167\n21  Nov  2012  152664\n22  Dec  2011   87323\n23  Dec  2012  123713","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mnth</th>\n      <th>yr</th>\n      <th>cnt</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Jan</td>\n      <td>2011</td>\n      <td>38189</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jan</td>\n      <td>2012</td>\n      <td>96744</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Feb</td>\n      <td>2011</td>\n      <td>48215</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Feb</td>\n      <td>2012</td>\n      <td>103137</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Mar</td>\n      <td>2011</td>\n      <td>64045</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mar</td>\n      <td>2012</td>\n      <td>164875</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Apr</td>\n      <td>2011</td>\n      <td>94870</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Apr</td>\n      <td>2012</td>\n      <td>174224</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>May</td>\n      <td>2011</td>\n      <td>135821</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>May</td>\n      <td>2012</td>\n      <td>195865</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Jun</td>\n      <td>2011</td>\n      <td>143512</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Jun</td>\n      <td>2012</td>\n      <td>202830</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Jul</td>\n      <td>2011</td>\n      <td>141341</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Jul</td>\n      <td>2012</td>\n      <td>203607</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Aug</td>\n      <td>2011</td>\n      <td>136691</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Aug</td>\n      <td>2012</td>\n      <td>214503</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Sep</td>\n      <td>2011</td>\n      <td>127418</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Sep</td>\n      <td>2012</td>\n      <td>218573</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Oct</td>\n      <td>2011</td>\n      <td>123511</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Oct</td>\n      <td>2012</td>\n      <td>198841</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Nov</td>\n      <td>2011</td>\n      <td>102167</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Nov</td>\n      <td>2012</td>\n      <td>152664</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Dec</td>\n      <td>2011</td>\n      <td>87323</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Dec</td>\n      <td>2012</td>\n      <td>123713</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"monthly_counts = day_df.groupby(by=[\"mnth\",\"yr\"]).agg({\n    \"cnt\": \"sum\"\n}).reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:46:53.155116Z","iopub.execute_input":"2024-09-04T15:46:53.156356Z","iopub.status.idle":"2024-09-04T15:46:53.17149Z","shell.execute_reply.started":"2024-09-04T15:46:53.1563Z","shell.execute_reply":"2024-09-04T15:46:53.170168Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/1746593547.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  monthly_counts = day_df.groupby(by=[\"mnth\",\"yr\"]).agg({\n","output_type":"stream"}]},{"cell_type":"code","source":"sns.lineplot(\n    data=monthly_counts,\n    x=\"mnth\",\n    y=\"cnt\",\n    hue=\"yr\",\n    palette=\"rocket\",\n    marker=\"o\")\n\nplt.title(\"trend in the number of bicycle users in recent years\")\nplt.xlabel('months')\nplt.ylabel('total count')\nplt.legend(title=\"year\", loc=\"upper right\")\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:45:28.403197Z","iopub.execute_input":"2024-09-04T15:45:28.403745Z","iopub.status.idle":"2024-09-04T15:45:28.90515Z","shell.execute_reply.started":"2024-09-04T15:45:28.403698Z","shell.execute_reply":"2024-09-04T15:45:28.903963Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1057: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_data = data.groupby(\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n  data_subset = grouped_data.get_group(pd_key)\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n  data_subset = grouped_data.get_group(pd_key)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Visualization 2: What is the pattern of bicycle rentals by season","metadata":{}},{"cell_type":"code","source":"season_pattern = day_df.groupby('season')[['registered', 'casual']].sum().reset_index()\n\n\n\nplt.figure(figsize=(10, 6))\n\nplt.bar(\n    season_pattern['season'],\n    season_pattern['registered'],\n    label='Registered',\n    color='tab:red'\n)\n\nplt.bar(\n    season_pattern['season'],\n    season_pattern['casual'],\n    label='Casual',\n    color='tab:blue',\n)\n\nplt.xlabel('season')\nplt.ylabel('total count')\nplt.title('pattern of bicycle rentals by season')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:48:36.046559Z","iopub.execute_input":"2024-09-04T15:48:36.047529Z","iopub.status.idle":"2024-09-04T15:48:36.400916Z","shell.execute_reply.started":"2024-09-04T15:48:36.04747Z","shell.execute_reply":"2024-09-04T15:48:36.399631Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/488748858.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  season_pattern = day_df.groupby('season')[['registered', 'casual']].sum().reset_index()\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Visualization 3: What is the weather-based bicycle rental pattern?","metadata":{}},{"cell_type":"code","source":"urutan_musim = ['spring', 'summer', 'fall', 'winter']","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10,6))\nsns.barplot(\n    x='weathersit',\n    y='cnt',\n    data=day_df)\n\nplt.title('weather-based bicycle rental pattern')\nplt.xlabel('weather')\nplt.ylabel('total count')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:49:42.519171Z","iopub.execute_input":"2024-09-04T15:49:42.519642Z","iopub.status.idle":"2024-09-04T15:49:42.89039Z","shell.execute_reply.started":"2024-09-04T15:49:42.519601Z","shell.execute_reply":"2024-09-04T15:49:42.889244Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_vals = vals.groupby(grouper)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA1sAAAIjCAYAAAD1OgEdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABaGUlEQVR4nO3deXgNd///8dfJnpDFEoklsRdRS0WRaiSWSklrba216yYo7lZvXdTSu1Srtlqqi2hRpVVVaq/YqS2qKGpptBViS1CSSOb3h2/m50iQtBkRno/rOtdlZj7zmfcc50zO68zM59gMwzAEAAAAAMhVDnldAAAAAADciwhbAAAAAGABwhYAAAAAWICwBQAAAAAWIGwBAAAAgAUIWwAAAABgAcIWAAAAAFiAsAUAAAAAFiBsAQAAAIAFCFsAkAdsNpv69u2bZ9sfNmyYbDabTp8+nWc1/BNlypRR9+7db9nm2LFjstlsev/992/bX8bzkJfCw8MVHh6epzXkpft9/wHc2whbAGCRTZs2adiwYTp//nxelwJYIj+/xvft26dhw4bp2LFjmZZNmTJF0dHRd7wmAPcewhYAWGTTpk0aPnx4vvwger944403dPny5bwuI9/Kz6/xffv2afjw4YQtAJYibAHAPerKlStKT0/P6zLuak5OTnJzc8vrMiz3999/53UJ972rV68qJSUlr8sAcIcRtgDcU37++WfZbDYtWrTInLdjxw7ZbDbVqlXLrm2zZs1Ut25du3lLly5VaGioChQoIE9PT0VGRmrv3r2ZttG9e3eVK1dObm5u8vf3V8+ePXXmzBmzzbBhw/TKK69IksqWLSubzSabzZbpW/SFCxfqwQcflKurq6pWraply5Zl2qc///xTPXv2lJ+fn9nus88+s2sTExMjm82muXPn6o033lDJkiXl4eGhpKSkWz5fp0+fVrt27eTl5aUiRYropZde0pUrV+zazJgxQ40aNVKxYsXk6uqqoKAgTZ06NVNf27dvV0REhIoWLSp3d3eVLVtWPXv2tGuTnp6u8ePHq2rVqnJzc5Ofn5+ef/55nTt3zq6dYRh6++23VapUKXl4eKhhw4aZ/h+yY9y4cSpdurTc3d0VFhamX375xW75ze7ZmjVrlurUqSMPDw8VKlRIDRo00IoVKyRJ3bp1U9GiRZWampppvaZNm6pSpUrZ7utmkpOT9dZbb6lChQpydXVVQECABg8erOTk5Nvuc3h4uB588EHt2LFDDRo0kIeHh1577bUc9ZtxT+GtXp+3e41n93WTXRk1zZ49W5UqVZKbm5uCg4O1bt06u3a///67+vTpo0qVKsnd3V1FihTR008/bffei46O1tNPPy1JatiwoVl7TEyMypQpo71792rt2rXm/OvvKTt//rwGDBiggIAAubq6qkKFCnr33Xftvti4/r7B8ePHq3z58nJ1dTUvXbTZbPrtt9/UvXt3+fj4yNvbWz169CAUA/cgp7wuAABy04MPPigfHx+tW7dOLVq0kCStX79eDg4O2r17t5KSkuTl5aX09HRt2rRJzz33nLnuF198oW7duikiIkLvvvuu/v77b02dOlWPPvqodu3apTJlykiSVq5cqSNHjqhHjx7y9/fX3r17NX36dO3du1dbtmyRzWZTmzZtdPDgQX355ZcaN26cihYtKkny9fU1t7dhwwYtWLBAffr0kaenpyZOnKi2bdsqLi5ORYoUkSSdPHlS9erVMz9o+vr6aunSperVq5eSkpI0YMAAu/0fOXKkXFxc9PLLLys5OVkuLi63fL7atWunMmXKaNSoUdqyZYsmTpyoc+fO6fPPPzfbTJ06VVWrVlWLFi3k5OSk77//Xn369FF6erqioqIkSadOnVLTpk3l6+ur//73v/Lx8dGxY8e0YMECu+09//zzio6OVo8ePdS/f38dPXpUH374oXbt2qWNGzfK2dlZkjR06FC9/fbbat68uZo3b66dO3eqadOmOToz8Pnnn+vChQuKiorSlStXNGHCBDVq1Eh79uyRn5/fTdcbPny4hg0bpkceeUQjRoyQi4uLtm7dqh9//FFNmzZVly5d9Pnnn2v58uV64oknzPXi4+P1448/6q233sp2X1lJT09XixYttGHDBj333HOqUqWK9uzZo3HjxungwYNauHDhbff9zJkzatasmTp06KBnnnlGfn5+Oe73dq/P273Gs/O6yam1a9fqq6++Uv/+/eXq6qopU6bo8ccf108//aQHH3xQkrRt2zZt2rRJHTp0UKlSpXTs2DFNnTpV4eHh2rdvnzw8PNSgQQP1799fEydO1GuvvaYqVapIkqpUqaLx48erX79+KliwoF5//XVJMl8vf//9t8LCwvTnn3/q+eefV2BgoDZt2qQhQ4boxIkTGj9+vF29M2bM0JUrV/Tcc8/J1dVVhQsXNpe1a9dOZcuW1ahRo7Rz50598sknKlasmN59991/9NwAuEsZAHCPiYyMNOrUqWNOt2nTxmjTpo3h6OhoLF261DAMw9i5c6chyfjuu+8MwzCMCxcuGD4+Psazzz5r11d8fLzh7e1tN//vv//OtM0vv/zSkGSsW7fOnPfee+8ZkoyjR49mai/JcHFxMX777Tdz3u7duw1JxqRJk8x5vXr1MooXL26cPn3abv0OHToY3t7eZi1r1qwxJBnlypXLsr4bvfXWW4Yko0WLFnbz+/TpY0gydu/efcv9jYiIMMqVK2dOf/vtt4YkY9u2bTfd5vr16w1JxuzZs+3mL1u2zG7+qVOnDBcXFyMyMtJIT08327322muGJKNbt2633LejR48akgx3d3fjjz/+MOdv3brVkGQMHDgw0/OQ4dChQ4aDg4PRunVrIy0tza7fjFrS0tKMUqVKGe3bt7db/sEHHxg2m804cuRItvsyDMMICwszwsLCzOkvvvjCcHBwMNavX2+3zrRp0wxJxsaNG2+5/2FhYYYkY9q0aXbzc9Jvdl+ft3qNZ+d1k1Hv9ft/M5IMScb27dvNeb///rvh5uZmtG7d+pbb3bx5syHJ+Pzzz8158+fPNyQZa9asydS+atWqWdY0cuRIo0CBAsbBgwft5v/3v/81HB0djbi4OMMw/v9r0MvLyzh16pRd24zXXM+ePe3mt27d2ihSpMjNnwAA+RKXEQK454SGhmrnzp26dOmSpGvf0Ddv3lw1a9bU+vXrJV0722Wz2fToo49Kuna26vz58+rYsaNOnz5tPhwdHVW3bl2tWbPG7N/d3d3895UrV3T69GnVq1dPkrRz585s19mkSROVL1/enK5evbq8vLx05MgRSdcupfvmm2/05JNPyjAMu7oiIiKUmJiYaXvdunWzq+92bjzD0K9fP0nSDz/8YM67vr/ExESdPn1aYWFhOnLkiBITEyVJPj4+kqTFixdneXmdJM2fP1/e3t567LHH7PYlODhYBQsWNJ/jVatWKSUlRf369bO7xO/Gs3i306pVK5UsWdKcrlOnjurWrWu3bzdauHCh0tPTNXToUDk42P+JzKjFwcFBnTt31qJFi3ThwgVz+ezZs/XII4+obNmy2e4rK/Pnz1eVKlVUuXJlu+epUaNGkmT3WrwZV1dX9ejR41/1e7vX5+1k53WTUyEhIQoODjanAwMD1bJlSy1fvlxpaWmZtpuamqozZ86oQoUK8vHxydH7Myvz589XaGioChUqZPccNmnSRGlpaZkuaWzbtq3d2ezrvfDCC3bToaGhOnPmzG0v/QWQv3AZIYB7TmhoqK5evarNmzcrICBAp06dUmhoqPbu3WsXtoKCgszLeg4dOiRJ5gfPG3l5eZn/Pnv2rIYPH665c+fq1KlTdu1y8iEyMDAw07xChQqZ9y8lJCTo/Pnzmj59uqZPn55lHzduP+ODviSlpaUpISHBbnnhwoXtLi2sWLGi3fLy5cvLwcHB7v6WjRs36q233tLmzZsz3VOSmJgob29vhYWFqW3btho+fLjGjRun8PBwtWrVSp06dZKrq6uka89xYmKiihUrdst9+f3337OszdfXV4UKFcpy3azcuL4kPfDAA5o3b95N1zl8+LAcHBwUFBR0y767du2qd999V99++626du2qAwcOaMeOHZo2bVqO+7rRoUOHtH///pt+SL/x/zwrJUuWzHQJaU77vd3r83ay87rJqZv9n/79999KSEiQv7+/Ll++rFGjRmnGjBn6888/ZRiG3Xb/jUOHDunnn3/O9nN4/fvxRjc+vxmv7XPnztkdbwDkb4QtAPec2rVry83NTevWrVNgYKCKFSumBx54QKGhoZoyZYqSk5O1fv16tW7d2lwn4+b2L774Qv7+/pn6dHL6/4fLdu3aadOmTXrllVdUs2ZNFSxYUOnp6Xr88cdzNPqfo6NjlvMzPhxm9PXMM8+oW7duWbatXr263fT13+ofP34804e9NWvW3PIHZG8843L48GE1btxYlStX1gcffKCAgAC5uLjohx9+0Lhx48wabTabvv76a23ZskXff/+9li9frp49e2rs2LHasmWL+RwVK1ZMs2fPznLbN/sAezcKCgpScHCwZs2apa5du2rWrFlycXFRu3bt/nXf6enpqlatmj744IMslwcEBNy2j6zObua039u9Pm8lu68bK/Tr108zZszQgAEDFBISIm9vb9lsNnXo0OFfbzc9PV2PPfaYBg8enOXyBx54wG76VmeZ/83zCyD/IGwBuOe4uLioTp06Wr9+vQIDAxUaGirp2hmv5ORkzZ49WydPnlSDBg3MdTIulypWrJiaNGly077PnTun1atXa/jw4Ro6dKg5P+PM2PVudalY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bOWlIUOGKDEx0XwcP348r0sCAAAAkM/ctWHL399fknTy5Em7+SdPnjSX+fv769SpU3bLr169qrNnz9q1yaqP67dxI1dXV3l5edk9AAAAACAn7tqwVbZsWfn7+2v16tXmvKSkJG3dulUhISGSpJCQEJ0/f147duww2/z4449KT09X3bp1zTbr1q1Tamqq2WblypWqVKmSChUqdIf2BgAAAMD9Jk/D1sWLFxUbG6vY2FhJ1wbFiI2NVVxcnGw2mwYMGKC3335bixYt0p49e9S1a1eVKFFCrVq1kiRVqVJFjz/+uJ599ln99NNP2rhxo/r27asOHTqoRIkSkqROnTrJxcVFvXr10t69e/XVV19pwoQJGjRoUB7tNQAAAID7QZ4O/b59+3Y1bNjQnM4IQN26dVN0dLQGDx6sS5cu6bnnntP58+f16KOPatmyZXJzczPXmT17tvr27avGjRvLwcFBbdu21cSJE83l3t7eWrFihaKiohQcHKyiRYtq6NChDPsOAAAAwFJ5GrbCw8NlGMZNl9tsNo0YMUIjRoy4aZvChQtrzpw5t9xO9erVtX79+n9cJwAAAADk1F17zxYAAAAA5GeELQAAAACwAGELAAAAACxA2AIAAAAACxC2AAAAAMAChC0AAAAAsABhCwAAAAAsQNgCAAAAAAsQtgAAAADAAoQtAAAAALAAYQsAAAAALEDYAgAAAAALELYAAAAAwAKELQAAAACwAGELAAAAACxA2AIAAAAACxC2AAAAAMAChC0AAAAAsABhCwAAAAAsQNgCAAAAAAsQtgAAAADAAoQtAAAAALAAYQsAAAAALEDYAgAAAAALELYAAAAAwAKELQAAAACwAGELAAAAACxA2AIAAAAACxC2AAAAAMAChC0AAAAAsABhCwAAAAAsQNgCAAAAAAsQtgAAAADAAoQtAAAAALAAYQsAAAAALEDYAgAAAAALELYAAAAAwAKELQAAAACwAGELAAAAACxA2AIAAAAACxC2AAAAAMAChC0AAAAAsABhCwAAAAAsQNgCAAAAAAsQtgAAAADAAoQtAAAAALAAYQsAAAAALEDYAgAAAAALELYAAAAAwAKELQAAAACwAGELAAAAACxA2AIAAAAACxC2AAAAAMAChC0AAAAAsABhCwAAAAAsQNgCAAAAAAsQtgAAAADAAoQtAAAAALAAYQsAAAAALEDY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oaGqXLlytr/FdXFxydaohNWqVVPt2rX18ccfa86cObc9wHXq1EmrVq3Srl27Mi1LTU3N8rmuUqWKrl69qq1bt5rzzpw5owMHDigoKEjStW8E4+Pj7Q7c1w8y4O3treLFi9v1cfXqVe3YsSPT9nr37m1+s9ikSRMFBATccp+Af6JSpUras2eP3T2P1988nl3Zfa9mJSgoSFevXrW74fxWqlSpot27d9u9Tzdu3CgHBwdVqlRJ0rVjQqFChfT222+rZs2aKliwoMLDw7V27VrFxMTY3a91s2Pajd544w29//77+uuvv8xtPvLII+rTp48eeughVahQwbxyAMjPMu7vzrj/+3acnJzUpEkTjRkzRj///LOOHTumH3/8UdLNjw3NmzdXgQIFNHXqVC1btszu7/bFixe1Zs0au/uzOnXqpIMHD2b5MxGGYSgxMTHT/PLly8vFxUUbN24056Wmpmrbtm12f7cvXLhgdzy5cXCgKlWq2P3dlpTlAGW9e/fWV199penTp6t8+fJ2Z9SQNwhbyJbJkycrLS1NderU0TfffKNDhw5p//79mjhxYqbT2Bk6d+6sokWLqmXLllq/fr2OHj2qmJgY9e/fX3/88Yeka2fNvvjiC+3fv19bt25V586dzaFeb+XGb5tuJzAwUC4uLpo0aZKOHDmiRYsWZfv3OcqUKaOjR48qNjZWp0+fzjRC3/V69+6t0aNHyzAMtW7d+pb9DhgwQPXr11fjxo01efJk7d69W0eOHNG8efNUr149uxEGM1SsWFEtW7bUs88+qw0bNmj37t165plnVLJkSfMPQnh4uBISEjRmzBgdPnxYkydP1tKlS+36eemllzR69GgtXLhQv/76q/r06ZNlaO7UqZP++OMPffzxx3w7hhxLTEzMdGb7+PHjmdp16tRJ6enpeu6557R//34tX77cHCUsJ5etZve9Gh4ero8++kg7duzQsWPH9MMPP+i1115Tw4YN5eXlla1tde7cWW5uburWrZt++eUXrVmzRv369VOXLl3k5+dn1t6gQQPNnj3bDFbVq1dXcnKyVq9ebV7KLGX/mBYSEqLq1avrnXfekXTtmLB9+3YtX75cBw8e1JtvvvmPgipwt3F0dNT+/fu1b98+OTo63rLt4sWLNXHiRMXGxur333/X559/rvT0dPOLjzJlymjr1q06duyYTp8+bZ7FdXR0VPfu3TVkyBBVrFjR7vPMsmXL9MADD9iN5NuuXTu1b99eHTt2NAeq+P3337V48WI1adJEa9asyVRbgQIF9OKLL+qVV17RsmXLtG/fPj377LP6+++/1atXL0lS3bp15eHhoddee02HDx/WnDlzMo2m+tJLL+mzzz7TjBkzdPDgQb311lvau3dvpu1lXMXz9ttv33JQEdw5hC1kS7ly5bRz5041bNhQ//nPf/Tggw/qscce0+rVqzV16tQs1/Hw8NC6desUGBioNm3aqEqVKuZQpRkfaD799FOdO3dOtWrVUpcuXcyhUW8np2HL19dX0dHRmj9/voKCgjR69OhMQ77eTNu2bfX444+rYcOG8vX11ZdffnnTth07dpSTk5M6duxod/9JVlxdXbVy5UoNHjxYH330kerVq6eHH35YEydOVP/+/fXggw9mud6MGTMUHBysJ554QiEhITIMQz/88IN5WVCVKlU0ZcoUTZ48WTVq1NBPP/2kl19+2a6P//znP+rSpYu6deumkJAQeXp6ZhkOvb291bZtWxUsWJDfDkGOxcTE6KGHHrJ7XH8JXAYvLy99//33io2NVc2aNfX6669r6NChknTb99H1svtejYiI0MyZM9W0aVNVqVJF/fr1U0RExG1H8Lueh4eHli9frrNnz+rhhx/WU089pcaNG5v3iGYICwtTWlqaGbYcHBzUoEED2Ww2u2+cc3JMGzhwoD755BMdP35czz//vNq0aaP27durbt26OnPmjPr06ZPt/QDuZl5eXtn6AsTHx0cLFixQo0aNVKVKFU2bNk1ffvmlqlatKkl6+eWX5ejoqKCgIPn6+trd09irVy+lpKRkCiZZ3UNps9k0Z84cffDBB1q4cKHCwsJUvXp1DRs2TC1btrzpGbjRo0erbdu26tKli2rVqqXffvtNy5cvV6FChSRdu4Jo1qxZ+uGHH1StWjV9+eWXmX6OoX379nrzzTc1ePBgBQcH6/fff9eLL76YaVsODg7q3r270tLS1LVr19s+d7Cezfinox8AeWTnzp1q1KiREhISMt13kNeOHTum8uXLa9u2bapVq1Zel5MrGjdurKpVq2rixIl5XQruI7Nnz1aPHj2UmJiYrbPd+dndfEwD7nXr169X48aNdfz4cfOs9NWrV+Xn56elS5fedLCeu1mvXr2UkJBg9/MtyDtOeV0AkFNXr17V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"},"metadata":{}}]},{"cell_type":"markdown","source":"#  Visualization 4: How do bicycle rentals compare between holidays and weekdays?","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10,6))\nsns.barplot(\n    x='workingday',\n    y='cnt',\n    data=day_df)\n\nplt.title(' bicycle rentals compare between holidays and weekdays')\nplt.xlabel('weekdays and holidays')\nplt.ylabel('total count')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:54:33.856785Z","iopub.execute_input":"2024-09-04T15:54:33.857251Z","iopub.status.idle":"2024-09-04T15:54:34.180712Z","shell.execute_reply.started":"2024-09-04T15:54:33.857208Z","shell.execute_reply":"2024-09-04T15:54:34.179638Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_vals = vals.groupby(grouper)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Visualization 5: How does the daily bike renter compare","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10,6))\nsns.barplot(\n    x='weekday',\n    y='cnt',\n    data=day_df,\n    order=['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'])\n\nplt.title(' daily bike renter compare')\nplt.xlabel('weekday')\nplt.ylabel('total count')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T15:54:41.590553Z","iopub.execute_input":"2024-09-04T15:54:41.590996Z","iopub.status.idle":"2024-09-04T15:54:42.058096Z","shell.execute_reply.started":"2024-09-04T15:54:41.590953Z","shell.execute_reply":"2024-09-04T15:54:42.056935Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped_vals = vals.groupby(grouper)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]}]}
